module.exports = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = null,
        peg$c2 = "",
        peg$c3 = "{",
        peg$c4 = "\"{\"",
        peg$c5 = "}",
        peg$c6 = "\"}\"",
        peg$c7 = function(type, id, stmts) {
                return {type: type, id: id, stmts: stmts};
              },
        peg$c8 = ";",
        peg$c9 = "\";\"",
        peg$c10 = function(first, rest) {
                var result = [first];
                for (var i = 0; i < rest.length; ++i) {
                    result.push(rest[i][1]);
                }
                return result;
              },
        peg$c11 = function(type, attrs) {
                return { type: "attr", attrType: type, attrs: attrs || {}};
              },
        peg$c12 = "=",
        peg$c13 = "\"=\"",
        peg$c14 = function(k, v) {
                var attrs = {};
                attrs[k] = v;
                return { type: "inlineAttr", attrs: attrs };
              },
        peg$c15 = function(id, attrs) { return {type: "node", id: id, attrs: attrs || {}}; },
        peg$c16 = function(lhs, rhs, attrs) {
                var elems = [lhs];
                for (var i = 0; i < rhs.length; ++i) {
                    elems.push(rhs[i]);
                }
                return { type: "edge", elems: elems, attrs: attrs || {} };
              },
        peg$c17 = function(id, stmts) {
                id = id[2] || [];
                return { type: "subgraph", id: id[0], stmts: stmts };
              },
        peg$c18 = function(first, rest) {
                var result = first;
                for (var i = 0; i < rest.length; ++i) {
                    result = rightBiasedMerge(result, rest[i][1]);
                }
                return result;
              },
        peg$c19 = "[",
        peg$c20 = "\"[\"",
        peg$c21 = "]",
        peg$c22 = "\"]\"",
        peg$c23 = function(aList) { return aList; },
        peg$c24 = ",",
        peg$c25 = "\",\"",
        peg$c26 = function(first, rest) {
                var result = first;
                for (var i = 0; i < rest.length; ++i) {
                    result = rightBiasedMerge(result, rest[i][3]);
                }
                return result;
              },
        peg$c27 = "--",
        peg$c28 = "\"--\"",
        peg$c29 = function() { return directed; },
        peg$c30 = "->",
        peg$c31 = "\"->\"",
        peg$c32 = function(rhs, rest) {
                var result = [rhs];
                for (var i = 0; i < rest.length; ++i) {
                    result.push(rest[i]);
                }
                return result;
              },
        peg$c33 = function(k, v) {
                var result = {};
                result[k] = v[3];
                return result;
              },
        peg$c34 = function(id) { return { type: "node", id: id, attrs: {} }; },
        peg$c35 = function(id) { return id; },
        peg$c36 = ":",
        peg$c37 = "\":\"",
        peg$c38 = "n",
        peg$c39 = "\"n\"",
        peg$c40 = "ne",
        peg$c41 = "\"ne\"",
        peg$c42 = "e",
        peg$c43 = "\"e\"",
        peg$c44 = "se",
        peg$c45 = "\"se\"",
        peg$c46 = "s",
        peg$c47 = "\"s\"",
        peg$c48 = "sw",
        peg$c49 = "\"sw\"",
        peg$c50 = "w",
        peg$c51 = "\"w\"",
        peg$c52 = "nw",
        peg$c53 = "\"nw\"",
        peg$c54 = "c",
        peg$c55 = "\"c\"",
        peg$c56 = "_",
        peg$c57 = "\"_\"",
        peg$c58 = "identifier",
        peg$c59 = /^[a-zA-Z\u0200-\u0377_]/,
        peg$c60 = "[a-zA-Z\\u0200-\\u0377_]",
        peg$c61 = /^[a-zA-Z\u0200-\u0377_0-9]/,
        peg$c62 = "[a-zA-Z\\u0200-\\u0377_0-9]",
        peg$c63 = function(fst, rest) { return fst + rest.join(""); },
        peg$c64 = "-",
        peg$c65 = "\"-\"",
        peg$c66 = ".",
        peg$c67 = "\".\"",
        peg$c68 = /^[0-9]/,
        peg$c69 = "[0-9]",
        peg$c70 = function(sign, dot, after) { return sign + dot + after.join(""); },
        peg$c71 = function(sign, before, after) { return sign + before.join("") + (after[0] || "") + (after[1] || []).join(""); },
        peg$c72 = "\"",
        peg$c73 = "\"\\\"\"",
        peg$c74 = "\\\"",
        peg$c75 = "\"\\\\\\\"\"",
        peg$c76 = function() { return '"'; },
        peg$c77 = "\\",
        peg$c78 = "\"\\\\\"",
        peg$c79 = /^[^"]/,
        peg$c80 = "[^\"]",
        peg$c81 = function(ch) { return "\\" + ch; },
        peg$c82 = function(id) { return id.join(""); },
        peg$c83 = "node",
        peg$c84 = "\"node\"",
        peg$c85 = function(k) { return k.toLowerCase(); },
        peg$c86 = "edge",
        peg$c87 = "\"edge\"",
        peg$c88 = "graph",
        peg$c89 = "\"graph\"",
        peg$c90 = "digraph",
        peg$c91 = "\"digraph\"",
        peg$c92 = "subgraph",
        peg$c93 = "\"subgraph\"",
        peg$c94 = "strict",
        peg$c95 = "\"strict\"",
        peg$c96 = function(graph) {
                directed = graph === "digraph";
                return graph;
              },
        peg$c97 = "whitespace",
        peg$c98 = /^[ \t\r\n]/,
        peg$c99 = "[ \\t\\r\\n]",
        peg$c100 = "comment",
        peg$c101 = "//",
        peg$c102 = "\"//\"",
        peg$c103 = /^[^\n]/,
        peg$c104 = "[^\\n]",
        peg$c105 = "/*",
        peg$c106 = "\"/*\"",
        peg$c107 = "*/",
        peg$c108 = "\"*/\"",
        peg$c109 = "any character",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsegraphStmt();
      if (s1 !== null) {
        while (s1 !== null) {
          s0.push(s1);
          s1 = peg$parsegraphStmt();
        }
      } else {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsegraphStmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = peg$parsestrict();
        if (s3 !== null) {
          s4 = peg$parse_();
          if (s4 !== null) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          s3 = peg$parsegraphType();
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== null) {
              s5 = peg$parseid();
              if (s5 === null) {
                s5 = peg$c2;
              }
              if (s5 !== null) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== null) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                if (s6 !== null) {
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s7 = peg$c3;
                    peg$currPos++;
                  } else {
                    s7 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                  }
                  if (s7 !== null) {
                    s8 = [];
                    s9 = peg$parse_();
                    while (s9 !== null) {
                      s8.push(s9);
                      s9 = peg$parse_();
                    }
                    if (s8 !== null) {
                      s9 = peg$parsestmtList();
                      if (s9 === null) {
                        s9 = peg$c2;
                      }
                      if (s9 !== null) {
                        s10 = [];
                        s11 = peg$parse_();
                        while (s11 !== null) {
                          s10.push(s11);
                          s11 = peg$parse_();
                        }
                        if (s10 !== null) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c5;
                            peg$currPos++;
                          } else {
                            s11 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                          }
                          if (s11 !== null) {
                            s12 = [];
                            s13 = peg$parse_();
                            while (s13 !== null) {
                              s12.push(s13);
                              s13 = peg$parse_();
                            }
                            if (s12 !== null) {
                              peg$reportedPos = s0;
                              s1 = peg$c7(s3,s5,s9);
                              if (s1 === null) {
                                peg$currPos = s0;
                                s0 = s1;
                              } else {
                                s0 = s1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsestmtList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsestmt();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c8;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            s4 = [];
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== null) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== null) {
              s7 = peg$parsestmt();
              if (s7 !== null) {
                s8 = [];
                s9 = peg$parse_();
                while (s9 !== null) {
                  s8.push(s9);
                  s9 = peg$parse_();
                }
                if (s8 !== null) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s9 = peg$c8;
                    peg$currPos++;
                  } else {
                    s9 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                  }
                  if (s9 === null) {
                    s9 = peg$c2;
                  }
                  if (s9 !== null) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== null) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== null) {
                s7 = peg$parsestmt();
                if (s7 !== null) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== null) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (s8 !== null) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s9 = peg$c8;
                      peg$currPos++;
                    } else {
                      s9 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s9 === null) {
                      s9 = peg$c2;
                    }
                    if (s9 !== null) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c1;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c10(s1,s4);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsestmt() {
      var s0;

      s0 = peg$parseattrStmt();
      if (s0 === null) {
        s0 = peg$parseedgeStmt();
        if (s0 === null) {
          s0 = peg$parsesubgraphStmt();
          if (s0 === null) {
            s0 = peg$parseinlineAttrStmt();
            if (s0 === null) {
              s0 = peg$parsenodeStmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseattrStmt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsegraph();
      if (s1 === null) {
        s1 = peg$parsenode();
        if (s1 === null) {
          s1 = peg$parseedge();
        }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parseattrList();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s1,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseinlineAttrStmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseid();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c12;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== null) {
              s5 = peg$parseid();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c14(s1,s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsenodeStmt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenodeId();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parseattrList();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c15(s1,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseedgeStmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenodeIdOrSubgraph();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parseedgeRHS();
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== null) {
              s5 = peg$parseattrList();
              if (s5 === null) {
                s5 = peg$c2;
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c16(s1,s3,s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsesubgraphStmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsesubgraph();
      if (s2 !== null) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== null) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== null) {
          s4 = peg$currPos;
          s5 = peg$parseid();
          if (s5 !== null) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== null) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== null) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 === null) {
            s4 = peg$c2;
          }
          if (s4 !== null) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === null) {
        s1 = peg$c2;
      }
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c3;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== null) {
            s4 = peg$parsestmtList();
            if (s4 !== null) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== null) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== null) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c5;
                  peg$currPos++;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c17(s1,s4);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseattrList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseattrListBlock();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== null) {
          s5 = peg$parseattrListBlock();
          if (s5 !== null) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== null) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== null) {
            s5 = peg$parseattrListBlock();
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c18(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseattrListBlock() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c19;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parseaList();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== null) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c21;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c23(s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseaList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseidDef();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== null) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c24;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s5 === null) {
            s5 = peg$c2;
          }
          if (s5 !== null) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== null) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== null) {
              s7 = peg$parseidDef();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== null) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== null) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c24;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
            if (s5 === null) {
              s5 = peg$c2;
            }
            if (s5 !== null) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== null) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== null) {
                s7 = peg$parseidDef();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c26(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseedgeRHS() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c27) {
        s2 = peg$c27;
        peg$currPos += 2;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 !== null) {
        peg$reportedPos = peg$currPos;
        s3 = peg$c29();
        if (s3) {
          s3 = peg$c1;
        } else {
          s3 = peg$c2;
        }
        if (s3 !== null) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === null) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c30) {
          s2 = peg$c30;
          peg$currPos += 2;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s2 !== null) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c29();
          if (s3) {
            s3 = peg$c2;
          } else {
            s3 = peg$c1;
          }
          if (s3 !== null) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parsenodeIdOrSubgraph();
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== null) {
              s5 = peg$parseedgeRHS();
              if (s5 === null) {
                s5 = peg$c2;
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c32(s3,s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseidDef() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseid();
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== null) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== null) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c12;
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s4 !== null) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== null) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            if (s5 !== null) {
              s6 = peg$parseid();
              if (s6 !== null) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c33(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsenodeIdOrSubgraph() {
      var s0, s1;

      s0 = peg$parsesubgraphStmt();
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsenodeId();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c34(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsenodeId() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseid();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parseport();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c35(s1);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseport() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c36;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== null) {
          s3 = peg$parseid();
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== null) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 58) {
                s6 = peg$c36;
                peg$currPos++;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
              }
              if (s6 !== null) {
                s7 = [];
                s8 = peg$parse_();
                while (s8 !== null) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
                if (s7 !== null) {
                  s8 = peg$parsecompassPt();
                  if (s8 !== null) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 === null) {
                s5 = peg$c2;
              }
              if (s5 !== null) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecompassPt() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 110) {
        s0 = peg$c38;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 2) === peg$c40) {
          s0 = peg$c40;
          peg$currPos += 2;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s0 === null) {
          if (input.charCodeAt(peg$currPos) === 101) {
            s0 = peg$c42;
            peg$currPos++;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s0 === null) {
            if (input.substr(peg$currPos, 2) === peg$c44) {
              s0 = peg$c44;
              peg$currPos += 2;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s0 === null) {
              if (input.charCodeAt(peg$currPos) === 115) {
                s0 = peg$c46;
                peg$currPos++;
              } else {
                s0 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s0 === null) {
                if (input.substr(peg$currPos, 2) === peg$c48) {
                  s0 = peg$c48;
                  peg$currPos += 2;
                } else {
                  s0 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c49); }
                }
                if (s0 === null) {
                  if (input.charCodeAt(peg$currPos) === 119) {
                    s0 = peg$c50;
                    peg$currPos++;
                  } else {
                    s0 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c51); }
                  }
                  if (s0 === null) {
                    if (input.substr(peg$currPos, 2) === peg$c52) {
                      s0 = peg$c52;
                      peg$currPos += 2;
                    } else {
                      s0 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c53); }
                    }
                    if (s0 === null) {
                      if (input.charCodeAt(peg$currPos) === 99) {
                        s0 = peg$c54;
                        peg$currPos++;
                      } else {
                        s0 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c55); }
                      }
                      if (s0 === null) {
                        if (input.charCodeAt(peg$currPos) === 95) {
                          s0 = peg$c56;
                          peg$currPos++;
                        } else {
                          s0 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c57); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseid() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c59.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c61.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        while (s3 !== null) {
          s2.push(s3);
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c63(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c64;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s1 === null) {
          s1 = peg$c2;
        }
        if (s1 !== null) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c66;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
          if (s2 !== null) {
            s3 = [];
            if (peg$c68.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s4 !== null) {
              while (s4 !== null) {
                s3.push(s4);
                if (peg$c68.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c69); }
                }
              }
            } else {
              s3 = peg$c1;
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c70(s1,s2,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c64;
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s1 === null) {
            s1 = peg$c2;
          }
          if (s1 !== null) {
            s2 = [];
            if (peg$c68.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s3 !== null) {
              while (s3 !== null) {
                s2.push(s3);
                if (peg$c68.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c69); }
                }
              }
            } else {
              s2 = peg$c1;
            }
            if (s2 !== null) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c66;
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
              if (s4 !== null) {
                s5 = [];
                if (peg$c68.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c69); }
                }
                while (s6 !== null) {
                  s5.push(s6);
                  if (peg$c68.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c69); }
                  }
                }
                if (s5 !== null) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
              if (s3 === null) {
                s3 = peg$c2;
              }
              if (s3 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c71(s1,s2,s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c72;
              peg$currPos++;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c73); }
            }
            if (s1 !== null) {
              s2 = [];
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c74) {
                s4 = peg$c74;
                peg$currPos += 2;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c75); }
              }
              if (s4 !== null) {
                peg$reportedPos = s3;
                s4 = peg$c76();
              }
              if (s4 === null) {
                peg$currPos = s3;
                s3 = s4;
              } else {
                s3 = s4;
              }
              if (s3 === null) {
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s4 = peg$c77;
                  peg$currPos++;
                } else {
                  s4 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s4 !== null) {
                  if (peg$c79.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                  }
                  if (s5 !== null) {
                    peg$reportedPos = s3;
                    s4 = peg$c81(s5);
                    if (s4 === null) {
                      peg$currPos = s3;
                      s3 = s4;
                    } else {
                      s3 = s4;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
                if (s3 === null) {
                  if (peg$c79.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                  }
                }
              }
              while (s3 !== null) {
                s2.push(s3);
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c74) {
                  s4 = peg$c74;
                  peg$currPos += 2;
                } else {
                  s4 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c75); }
                }
                if (s4 !== null) {
                  peg$reportedPos = s3;
                  s4 = peg$c76();
                }
                if (s4 === null) {
                  peg$currPos = s3;
                  s3 = s4;
                } else {
                  s3 = s4;
                }
                if (s3 === null) {
                  s3 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s4 = peg$c77;
                    peg$currPos++;
                  } else {
                    s4 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                  }
                  if (s4 !== null) {
                    if (peg$c79.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c80); }
                    }
                    if (s5 !== null) {
                      peg$reportedPos = s3;
                      s4 = peg$c81(s5);
                      if (s4 === null) {
                        peg$currPos = s3;
                        s3 = s4;
                      } else {
                        s3 = s4;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                  if (s3 === null) {
                    if (peg$c79.test(input.charAt(peg$currPos))) {
                      s3 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s3 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c80); }
                    }
                  }
                }
              }
              if (s2 !== null) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c72;
                  peg$currPos++;
                } else {
                  s3 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c73); }
                }
                if (s3 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c82(s2);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parsenode() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c83) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseedge() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c86) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsegraph() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c88) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedigraph() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c90) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesubgraph() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c92) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsestrict() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c94) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsegraphType() {
      var s0, s1;

      s0 = peg$parsegraph();
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsedigraph();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c96(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c98.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s1 !== null) {
        while (s1 !== null) {
          s0.push(s1);
          if (peg$c98.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c99); }
          }
        }
      } else {
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c101) {
        s1 = peg$c101;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c103.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
        while (s3 !== null) {
          s2.push(s3);
          if (peg$c103.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c104); }
          }
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c105) {
          s1 = peg$c105;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s1 !== null) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c107) {
            s5 = peg$c107;
            peg$currPos += 2;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c108); }
          }
          peg$silentFails--;
          if (s5 === null) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== null) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c107) {
              s5 = peg$c107;
              peg$currPos += 2;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            peg$silentFails--;
            if (s5 === null) {
              s4 = peg$c2;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 !== null) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c109); }
              }
              if (s5 !== null) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          }
          if (s2 !== null) {
            if (input.substr(peg$currPos, 2) === peg$c107) {
              s3 = peg$c107;
              peg$currPos += 2;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s3 !== null) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0;

      s0 = peg$parsewhitespace();
      if (s0 === null) {
        s0 = peg$parsecomment();
      }

      return s0;
    }


        var directed;

        function rightBiasedMerge(lhs, rhs) {
            var result = {};
            for (var k in lhs) {
                result[k] = lhs[k];
            }
            for (var k in rhs) {
                result[k] = rhs[k];
            }
            return result;     
        }


    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})();
